{"version":3,"sources":["csvExportComponent.jsx","csvComponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["ExportCSV","props","data","CSVdata","prevProps","prevState","snapshot","this","setState","React","Component","FileReader","handleChange","event","csvfile","target","files","importCSV","state","Papa","parse","complete","updateData","header","groupBy","list","keyGetter","map","Map","forEach","item","key","collection","get","push","set","newCSV","refCSV","obj","Date","dates","keys","workers","Set","el","resultArray","date","worker","find","o","undefined","bind","result","console","log","className","type","ref","input","filesInput","name","placeholder","onChange","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAwBeA,E,kDApBX,WAAYC,GAAQ,IAAD,8BACf,gBACKC,KAAOD,EAAME,QAFH,E,+DAKAC,EAAWC,EAAWC,GACjCC,KAAKN,MAAME,UAAYC,EAAUD,SACjCI,KAAKC,SAASD,KAAKL,KAAOK,KAAKN,MAAME,W,+BAKzC,OACI,gCACI,cAAC,UAAD,CAASD,KAAMK,KAAKL,KAApB,yBADJ,W,GAdYO,IAAMC,WC+FfC,E,kDA7FX,aAAe,IAAD,8BACV,gBAQJC,aAAe,SAAAC,GACX,EAAKL,SAAS,CACVM,QAASD,EAAME,OAAOC,MAAM,MAXtB,EAedC,UAAY,WAAO,IACRH,EAAW,EAAKI,MAAhBJ,QACPK,IAAKC,MAAMN,EAAS,CAChBO,SAAU,EAAKC,WACfC,QAAQ,KAnBF,EAuBdC,QAAU,SAACC,EAAMC,GACb,IAAMC,EAAM,IAAIC,IAUhB,OATAH,EAAKI,SAAQ,SAACC,GACV,IAAMC,EAAML,EAAUI,GAChBE,EAAaL,EAAIM,IAAIF,GACtBC,EAGDA,EAAWE,KAAKJ,GAFhBH,EAAIQ,IAAIJ,EAAK,CAACD,OAKfH,GAlCG,EAqCdS,OAAS,WACL,IAAIC,EAAS,EAAKb,QAAQ,EAAKN,MAAMhB,MAAM,SAAAoC,GAAG,OAAIA,EAAIC,QAClDC,EAAK,YAAOH,EAAOI,QACnBC,EAAO,YAAO,IAAIC,IAAI,EAAKzB,MAAMhB,KAAKyB,KAAI,SAAAiB,GAAE,OAAIA,EAAG,sBACnDC,EAAc,GAClBH,EAAQb,SAAQ,SAAAe,GAEZ,IAAMN,EAAM,CAAC,YAAaM,GAC1BJ,EAAMX,SAAQ,SAAAiB,GACV,IACIC,EADQV,EAAOJ,IAAIa,GACJE,MAAK,SAAAC,GAAC,OAAIA,EAAE,kBAAoBL,KAE/CN,EAAIQ,QADOI,IAAXH,EACYA,EAAO,cAEP,QAGpBF,EAAYX,KAAKI,MAErB,EAAK9B,SAAS,CACVN,KAAM2C,KAvDV,EAAK3B,MAAQ,CACTJ,aAASoC,EACThD,KAAM,CAAC,KAEX,EAAKoB,WAAa,EAAKA,WAAW6B,KAAhB,gBANR,E,uDA8DHC,GACQ,IAAXA,GACA7C,KAAKC,SAAS,CACVN,KAAMkD,EAAOlD,OAErBmD,QAAQC,IAAIF,EAAOlD,MACnBK,KAAK6B,W,+BAGC,IAAD,OACL,OACI,sBAAKmB,UAAU,MAAf,UACI,kDACA,uBACIA,UAAU,YACVC,KAAK,OACLC,IAAK,SAAAC,GACD,EAAKC,WAAaD,GAEtBE,KAAK,OACLC,YAAa,KACbC,SAAUvD,KAAKK,eAEnB,sBACA,wBAAQmD,QAASxD,KAAKU,UAAtB,0BACA,cAAC,EAAD,CAAWd,QAASI,KAAKW,MAAMhB,c,GAxFtBO,IAAMC,WCOhBsD,MARf,WACE,OACE,qBAAKT,UAAU,MAAf,SACE,cAAC,EAAD,OCMSU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ab58a897.chunk.js","sourcesContent":["import React from 'react';\r\nimport { CSVLink } from \"react-csv\";\r\n\r\nclass ExportCSV extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        this.data = props.CSVdata;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.CSVdata !== prevProps.CSVdata){\r\n            this.setState(this.data = this.props.CSVdata)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <CSVLink data={this.data}>Download me</CSVLink>;\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExportCSV;","import React from 'react';\r\nimport Papa from 'papaparse';\r\nimport ExportCSV from \"./csvExportComponent\";\r\n\r\nclass FileReader extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            csvfile: undefined,\r\n            data: [{}]\r\n        };\r\n        this.updateData = this.updateData.bind(this);\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({\r\n            csvfile: event.target.files[0]\r\n        });\r\n    };\r\n\r\n    importCSV = () => {\r\n        const {csvfile} = this.state;\r\n        Papa.parse(csvfile, {\r\n            complete: this.updateData,\r\n            header: true\r\n        });\r\n    };\r\n\r\n    groupBy = (list, keyGetter) => {\r\n        const map = new Map();\r\n        list.forEach((item) => {\r\n            const key = keyGetter(item);\r\n            const collection = map.get(key);\r\n            if (!collection) {\r\n                map.set(key, [item]);\r\n            } else {\r\n                collection.push(item);\r\n            }\r\n        });\r\n        return map;\r\n    }\r\n\r\n    newCSV = () => {\r\n        let refCSV = this.groupBy(this.state.data, obj => obj.Date)\r\n        let dates = [...refCSV.keys()];\r\n        let workers = [...new Set(this.state.data.map(el => el['Employee Name']))]\r\n        let resultArray = [];\r\n        workers.forEach(el => {\r\n            debugger\r\n            const obj = {\"Name/Date\": el}\r\n            dates.forEach(date => {\r\n                let group = refCSV.get(date);\r\n                let worker = group.find(o => o['Employee Name'] == el);\r\n                if (worker !== undefined) {\r\n                    obj[date] = worker['Work Hours']\r\n                } else {\r\n                    obj[date] = null;\r\n                }\r\n            })\r\n            resultArray.push(obj);\r\n        })\r\n        this.setState({\r\n            data: resultArray\r\n        });\r\n    }\r\n\r\n\r\n    updateData(result) {\r\n        if (result !== 0)\r\n            this.setState({\r\n                data: result.data\r\n            });\r\n        console.log(result.data)\r\n        this.newCSV();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <h2>Import CSV File!</h2>\r\n                <input\r\n                    className=\"csv-input\"\r\n                    type=\"file\"\r\n                    ref={input => {\r\n                        this.filesInput = input;\r\n                    }}\r\n                    name=\"file\"\r\n                    placeholder={null}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <p/>\r\n                <button onClick={this.importCSV}> Upload now!</button>\r\n                <ExportCSV CSVdata={this.state.data}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FileReader;","import './App.css';\nimport FileReader from \"./csvComponent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FileReader />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}